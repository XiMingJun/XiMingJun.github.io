[{"title":"部署Hexo博客新家小记","date":"2017-01-23T07:07:00.000Z","path":"2017/01/23/测试/","text":"部署Hexo博客新家小记最近项目不忙，于是花了点时间部署了Hexo,虽然不难，但是还是遇到点小问题，特此写下这篇博客，希望能帮到有需要的同学。 hexo 安装步骤：12345npm install hexo-cli -ghexo init blogcd blognpm installhexo server 遗憾的是第一步就卡住了，安装过程贼慢，我是等了一个小时，还没有安装完成，简直忍无可忍，查阅相关资料，原来是被墙的问题。 解决方案：选择国内镜像去获取资源 在安装时可以手动指定从哪个镜像服务器获取资源，我们可以使用阿里巴巴在国内的镜像服务器，命令如下： npm install hexo-cli -g –registry=http://registry.npm.taobao.org 只需要使用–registry参数指定镜像服务器地址，为了避免每次安装都需要–registry参数，可以使用如下命令进行永久设置： npm config set registry http://registry.npm.taobao.org 换了国内镜像，安装速度就很快了,原来一个小时没装成功的，现在不到一分钟就解决了，就是这么任性。 获取资源没问题了，可能还会遇到另一个问题：权限问题 很明显可以看到 “permission denied“ 解决方案：sudo npm install hexo-cli -g","tags":[]},{"title":"金融类app数值精确计算问题","date":"2017-01-23T03:54:55.000Z","path":"2017/01/23/金融类app数值精确计算问题/","text":"金融类app各种数值的精确计算问题最近总算闲下来了，有时间把前段时间app里边踩到的坑总结下，既金融类app中有关数值精确计算的问题。 1.简单粗暴的方法—doubleValue解决刚开始接手的项目中关于数值的计算就是按照字符串直接转doubleValue的方式转化为后进行加减乘除运算。这样做在大多数情况下是不会有问题的，但如果经过全面测试的话，有些字符串转double会出现精度损失问题，计算结果也会出现不准确的问题，一个最近踩过的坑就是用户再输入投资金额的时候会对自己账户中的可用余额进行判断，以确定余额是否充足，测试的时候输入很多数据都没问题，但线上用户大量数据就会出现偶尔数据错误，用户输入金额明明和可用余额一样，但判断的时候就会提示可用余额不足，老板使用过程中也遇到过，还找了我好几次，汗，都是之前开发人员的坑。所以记住这丫简单粗暴的方法针对金融类的对数据精度及其敏感的项目不可取。 2.明智之举—NSDecimalNumber NSDecimalNumber是苹果提供的专门金融货币精确数值计算的API。 1234567+ (instancetype)decimalNumberHandlerWithRoundingMode:(NSRoundingMode)roundingMode scale:(short)scale raiseOnExactness:(BOOL)raiseOnExactness raiseOnOverflow:(BOOL)raiseOnOverflow raiseOnUnderflow:(BOOL)raiseOnUnderflow raiseOnDivideByZero:(BOOL)raiseOnDivideByZero 参数 说明 roundingMode 要使用的舍入模式，有四种值： NSRoundUp, NSRoundDown, NSRoundPlain, and NSRoundBankers scale 结果保留几位小数 raiseOnExactness 发生精确错误时是否抛出异常，一般为NO raiseOnOverflow 发生溢出错误时是否抛出异常，一般为NO raiseOnUnderflow 发生不足错误时是否抛出异常，一般为NO raiseOnDivideByZero 被0除时是否抛出异常，一般为YES 2.1 NSDecimalNumber 的使用。 NSDecimalNumber是进行数值计算的对象，ji所有的加减乘除，幂运算操作对象。 12345678910111213141516171819202122232425NSDecimalNumberHandler *handler = [NSDecimalNumberHandler decimalNumberHandlerWithRoundingMode:NSRoundBankers scale:2 raiseOnExactness:NO raiseOnOverflow:NO raiseOnUnderflow:NO raiseOnDivideByZero:YES];NSDecimalNumber *num1 = [NSDecimalNumber decimalNumberWithString:[NSString stringWithFormat:@&quot;%@&quot;,@&quot;2.37&quot;]];NSDecimalNumber *num2 = [NSDecimalNumber decimalNumberWithString:[NSString stringWithFormat:@&quot;%@&quot;,@&quot;15.89&quot;]];//加NSDecimalNumber *addResult = [num1 decimalNumberByAdding:num2 withBehavior:handler];//减NSDecimalNumber *subtractResult = [num1 decimalNumberBySubtracting:num2 withBehavior:handler];//乘NSDecimalNumber *multiplyResult = [num1 decimalNumberByMultiplyingBy:num2 withBehavior:handler];//除NSDecimalNumber *divideResult = [num1 decimalNumberByDividingBy:num2 withBehavior:handler];//平方NSDecimalNumber *powerResult = [num1 decimalNumberByRaisingToPower:2 withBehavior:handler];NSLog(@&quot;\\n%f\\n%f\\n%f\\n%f\\n%f&quot;,[addResult doubleValue],[subtractResult doubleValue],[multiplyResult doubleValue],[divideResult doubleValue],[powerResult doubleValue]); 这样就能够很好地解决金融类app货币单位精确计算的问题。但有一点需要注意的是如果计算公式比较长，那么withBehavior应该在最后一步使用，切不可在计算过程中进行舍入操作，相信有点数学常识的同学都能明白这个问题。如下：等额本息的预计收益计算 * 公式： 每月本息还款额=(投资金额月利率(1+月利率)^还款月数)/(((1+月利率)^还款月数)-1) 1234567891011121314151617181920212223242526272829303132333435/** * 等额本息标的收益计算 * 公式： 每月本息还款额=(投资金额*月利率*(1+月利率)^还款月数)/(((1+月利率)^还款月数)-1) * @param interest 年化收益 * @param investAmount 投资金额 * @param selectBid 选择的标 * * @return 收益 */+ (double)calculatePrincipalAndInterestBidWithInvestInterest:(double)interest amount:(NSString *)investAmount bid:(Bid *)selectBid&#123; NSDecimalNumberHandler *roundBanker = [NSDecimalNumberHandler decimalNumberHandlerWithRoundingMode:NSRoundBankers scale:2.0f raiseOnExactness:NO raiseOnOverflow:NO raiseOnUnderflow:NO raiseOnDivideByZero:YES]; NSDecimalNumber *investAmountDec = [[NSDecimalNumber alloc] initWithString:investAmount];//投资金额 NSDecimalNumber *monthInterestDec = [[NSDecimalNumber decimalNumberWithString:[NSString stringWithFormat:@&quot;%f&quot;,interest/100]] decimalNumberByDividingBy:[NSDecimalNumber decimalNumberWithString:[NSString stringWithFormat:@&quot;%f&quot;,12.00]]];//月利率 double month = selectBid.creditPeriod;//标的募集期数 if (selectBid.creditType == CreditType_DaylyOneOffPayment) &#123; //按天标,转化为月份 month = month/30.00; &#125; NSDecimalNumber *monthDec = [NSDecimalNumber decimalNumberWithString:[NSString stringWithFormat:@&quot;%f&quot;,month]];//还款月数// * 公式： 每月本息还款额=(投资金额*月利率*(1+月利率)^还款月数)/(((1+月利率)^还款月数)-1) NSDecimalNumber *decNum1 = [[[[[NSDecimalNumber decimalNumberWithString:[NSString stringWithFormat:@&quot;%d&quot;,1]] decimalNumberByAdding:monthInterestDec] decimalNumberByRaisingToPower:month] decimalNumberByMultiplyingBy:monthInterestDec] decimalNumberByMultiplyingBy:investAmountDec]; NSDecimalNumber *decNum2 = [[[[NSDecimalNumber decimalNumberWithString:[NSString stringWithFormat:@&quot;%d&quot;,1]] decimalNumberByAdding:monthInterestDec] decimalNumberByRaisingToPower:month] decimalNumberBySubtracting:[NSDecimalNumber decimalNumberWithString:[NSString stringWithFormat:@&quot;%d&quot;,1]]]; NSDecimalNumber *monthIncomeDec = [decNum1 decimalNumberByDividingBy:decNum2];//月本息还款额 NSDecimalNumber *totalIncomeDec = [[monthDec decimalNumberByMultiplyingBy:monthIncomeDec] decimalNumberBySubtracting:investAmountDec withBehavior:roundBanker];//总还款额 - 本金 = 总收益 return [totalIncomeDec doubleValue] &gt; 0 ? [totalIncomeDec doubleValue] : 0;&#125;","tags":[]},{"title":"iOS 项目自动化打包实践","date":"2017-01-23T02:56:00.000Z","path":"2017/01/23/iOS-项目自动化打包实践/","text":"iOS 项目自动化打包实践1.准备工作1.1 安装fir.cli具体安装步骤见github. 1.2 Xcode 证书配置Xcode 根据不同的模式配置不同的证书，默认有Release，Debug,可自行添加，添加方法见图。 AdHoc 就是新添加的用于测试分发 的打包方式。配置AdHoc证书 Debug 调试模式，配置调试证书 Release 发布模式，配置发布证书 配置好后就以后正常情况下，真机调试，发布appstore打包，测试分发打包都不用再改这些证书配置了。 1.3 fir.im 账号申请2. 项目环境2.1 cocoapods 管理依赖.2.2多target项目 (参考链接)3. 实现目标1.实现一键自动化打包，上传第三方托管平台。 2.可自由配置打包本地项目还是远程git仓库项目 3.自由配置打包Target,更新日志，打包类型，打包分支 4.应用使用脚本打包需要配置工程的参数，脚本中有详细的注释，打包时只需修改scheme,branch,changeLog，之后把脚本文件拖拽到终端执行即可。 把fir.im上的app短连接地址复制出来，发给测试人员收藏该地址，以后打包成功，测试人员直接刷新网页就ok，该地址会显示app的最新安装二维码。 遇到问题：1.执行脚本如遇权限问题，执行 chmod 755 $SCRIPT_PATH2.目前遇到远程git仓库打包无法区分scheme的问题(暂未解决) 附录：自动打包脚本","tags":[{"name":"iOS,自动化打包,fir.cli","slug":"iOS-自动化打包-fir-cli","permalink":"http://yoursite.com/tags/iOS-自动化打包-fir-cli/"}]},{"title":"Hello World","date":"2017-01-22T09:12:00.000Z","path":"2017/01/22/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]